package com.example.tender;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.common.base.Function;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Random;

public class MainActivity extends AppCompatActivity {

    private static final Integer LOAD_SIZE = 15;
    final long ONE_MEGABYTE = 1024*1024*5;
    double x1, y1, x2, y2;
    private String v, vg, gf, df, hookUp, longTerm;
    private UserInfo currentUserInfo;
    DishManager dishManager;
    List<Dish> generalDishes;
    String[] likedDishes;
    List<Dish> matchDishList;
    List<Dish> dislikedDishes;
    Dish currentDish;

    FragmentManager fragmentManager;
    FoodProfileFragment foodProfileFragment;
    Fragment currentFragment;

    ImageButton homeButton;
    ImageButton matchButton;

    Random rand;
    private DatabaseReference mDatabase;
    StorageReference storageReference;
    FirebaseFirestore db;

    int counter = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        db = FirebaseFirestore.getInstance();

        mDatabase = FirebaseDatabase.getInstance().getReference();
        foodProfileFragment = new FoodProfileFragment();
        currentUserInfo = new UserInfo();

        fragmentManager = getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.add(R.id.fragment_container, foodProfileFragment);
        fragmentTransaction.commit();
        currentFragment = foodProfileFragment;

        homeButton = findViewById(R.id.homebutton);
        matchButton = findViewById(R.id.matchbutton);

        dishManager = new DishManager();
        generalDishes = new ArrayList<>();
        likedDishes = new String[4];
        matchDishList = new ArrayList<>();
        dislikedDishes = new ArrayList<>();

        rand = new Random();

        dishManager.getDishes((l)->{ // l is the dishList generated by get single random dish
            generalDishes = l;
            Collections.shuffle(generalDishes);

            if (generalDishes.size() == LOAD_SIZE && currentDish == null){

                updateCurrentDish();
                passCurrentDishProfile(foodProfileFragment); // display dish data in food profile fragment
            }
            return null;
        });
    }

    /**
     * Detects the swiping gestures on the screen. Responds to a left swipe and a right swipe.
     * @param touchEvent been detected. Either a left swipe or a right swipe. Has to be
     *                   beyond a certain value to confirm that the user has a strong tendency
     *                   to swipe and it's not just a touch by mistake.
     * @return false
     */
    @Override
    public boolean onTouchEvent(MotionEvent touchEvent) {
        if (currentDish != null) {
            switch (touchEvent.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    x1 = touchEvent.getX();
                    y1 = touchEvent.getY();
                    break;
                case MotionEvent.ACTION_UP:
                    x2 = touchEvent.getX();
                    y2 = touchEvent.getY();
                    if (Math.abs(x1 - x2) > 30) {
                        if (x1 > x2) { // swiping left
                            onSwipeLeft();
                        } else if (x1 < x2) { // swiping right
                            onSwipeRight();
                        }
                    }
                    break;
            }
        }
        return false;
    }

    /**
     * Pass current dish object to the fragment
     * @param fragment to receive current dish object
     */
    public void passCurrentDishProfile(Fragment fragment){
        Bundle bundle = new Bundle();
        bundle.putParcelable("currentDish", currentDish);
        fragment.setArguments(bundle);
    }

    /**
     * Choose a random dish from unsorted dish list which hasn't been disliked by the user.
     */
    public void updateCurrentDish(){
        int randomNum = rand.nextInt(generalDishes.size());
        if (dislikedDishes.contains(generalDishes.get(randomNum)) && matchDishList.contains(generalDishes.get(randomNum))) {
            randomNum = rand.nextInt(generalDishes.size());
        }
        currentDish = generalDishes.get(randomNum);
    }

    /**
     * Adds currentDish to likedDishes list, updates a random currentDish
     * and starts the MatchDisplay activity.
     */
    public void onSwipeRight(){

        likedDishes[counter] = currentDish.getName();
        matchDishList.add(currentDish);
        counter++;
        if(counter == 4){
            counter = 0;
        }
        updateCurrentDish();
        Toast.makeText(this, "MATCH!", Toast.LENGTH_SHORT).show();
        passCurrentDishProfile(foodProfileFragment);
    }

    /**
     * add currentDish to dislikedDishes list, updates a random currentDish,
     * and pass it to foodProfileFragment to display.
     */
    public void onSwipeLeft(){
        dislikedDishes.add(currentDish);
        updateCurrentDish();
        Toast.makeText(this, "DISLIKE!", Toast.LENGTH_SHORT).show();
        passCurrentDishProfile(foodProfileFragment);
    }

    public void goBackHome(View view){
        Intent i = new Intent(MainActivity.this, UserSettingsPage.class);
        startActivity(i);
    }

    public void goToMatch(View view){
        Intent i = new Intent(MainActivity.this, MatchDisplay.class);
        i.putExtra("key", likedDishes); //pass likedDishes so that they can be displayed in match page
        startActivity(i);
    }
}