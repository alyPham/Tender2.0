package com.example.tender;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.content.Intent;
import android.os.Bundle;
import android.service.autofill.FieldClassification;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageButton;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Random;

public class MainActivity extends AppCompatActivity {

    private static final Integer LOAD_SIZE = 15;
    double x1, y1, x2, y2;
    DishManager dishManager;
    RestaurantManager restaurantManager;
    List<Dish> generalDishes;
    List<Dish> likedDishes;
    List<Dish> dislikedDishes;
    List<Dish> customizedDishes;
    Dish currentDish;

    FragmentManager fragmentManager;
    Fragment foodProfileFragment;
    Fragment currentFragment;

    ImageButton homeButton;
    ImageButton matchButton;

    DietaryPage dietaryPage;

    Random rand;
    private DatabaseReference mDatabase;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mDatabase = FirebaseDatabase.getInstance().getReference();
        foodProfileFragment = new FoodProfileFragment();

        fragmentManager = getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.add(R.id.fragment_container, foodProfileFragment);
        fragmentTransaction.commit();
        currentFragment = foodProfileFragment;

        homeButton = findViewById(R.id.homebutton);
        matchButton = findViewById(R.id.matchbutton);

        dishManager = new DishManager();
        restaurantManager = new RestaurantManager();
        generalDishes = new ArrayList<>();
        likedDishes = new ArrayList<>();
        dislikedDishes = new ArrayList<>();

        dietaryPage = new DietaryPage();
        rand = new Random();
        

        dishManager.getDishes((l)->{ // l is the dishList generated by get single random dish
            generalDishes = l;
            //TODO: customize generalDishes according to user settings
            Collections.shuffle(generalDishes);

            if (generalDishes.size() == LOAD_SIZE && currentDish == null){
//                retrieveUserData();
                editDietaryRestrictions();
                updateCurrentDish();
                passCurrentDishProfile(foodProfileFragment); // display dish data in food profile fragment
            }
            return null;
        });

//        System.out.println("------------------general dishes outside " + generalDishes.size());
//        System.out.println("------------df is " + df);
    }


//    LongTermRelationship(){
//        for (Dish i:generalDishes){
//           if  i.getRestaurant().getDineIn().equals("no") {
//                generalDishes.remove(i);
//            }
//        }
//    }

    public void editDietaryRestrictions(){
        for (Dish dish:generalDishes){
            if (dietaryPage.getPrefs.getBoolean(mDatabase.child("profile").child(Objects.requireNonNull(FirebaseAuth.
                    getInstance().getCurrentUser()).getUid()) + ":vegetarian", true)){
                deleteNonVegetarian(dish);
            }
            if (dietaryPage.getPrefs.getBoolean(mDatabase.child("profile").child(Objects.requireNonNull(FirebaseAuth.
                    getInstance().getCurrentUser()).getUid()) + ":vegan", true)){
                deleteNonVegan(dish);
            }
            if(dietaryPage.getPrefs.getBoolean(mDatabase.child("profile").child(Objects.requireNonNull(FirebaseAuth.
                    getInstance().getCurrentUser()).getUid()) + ":dairy", true)){
                deleteDairy(dish);
            }
            if(dietaryPage.getPrefs.getBoolean(mDatabase.child("profile").child(Objects.requireNonNull(FirebaseAuth.
                    getInstance().getCurrentUser()).getUid()) + ":gluten", true)){
                deleteGluten(dish);
            }
        }
    }

    public void retrieveUserInfo(){

    }

    //TODO: Implement this method and all the other dietary restrictions
    public void deleteGluten(Dish dish){
        if (dish.getGlutenFree().equals("n")){
            generalDishes.remove(dish);
        }
    }

    public void deleteDairy(Dish dish){
        if (dish.getDairyFree().equals("n")){
            generalDishes.remove(dish);
        }
    }

    public void deleteNonVegetarian(Dish dish){
        if (dish.getVegetarian().equals("n")){
            generalDishes.remove(dish);
        }
    }

    public void deleteNonVegan(Dish dish){
        if (dish.getVegan().equals("n")){
            generalDishes.remove(dish);
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent touchEvent) {
        if (currentDish != null) {
            switch (touchEvent.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    x1 = touchEvent.getX();
                    y1 = touchEvent.getY();
                    break;
                case MotionEvent.ACTION_UP:
                    x2 = touchEvent.getX();
                    y2 = touchEvent.getY();
                    if (Math.abs(x1 - x2) > 30) {
                        if (x1 > x2) { // swiping left
                            onSwipeLeft();
                        } else if (x1 < x2) { // swiping right
                            onSwipeRight();
                        }
                    }
                    break;
            }
        }
        return false;
    }

    public void passCurrentDishProfile(Fragment fragment){
        Bundle bundle = new Bundle();
        bundle.putParcelable("currentDish", currentDish);
        fragment.setArguments(bundle);
    }

    public void updateCurrentDish(){
        int randomNum = rand.nextInt(generalDishes.size());
        while (dislikedDishes.contains(generalDishes.get(randomNum))) {
            randomNum = rand.nextInt(generalDishes.size());
        }
        currentDish = generalDishes.get(randomNum);
    }

    /**
     *
     */
    public void onSwipeRight(){
        likedDishes.add(currentDish);
        updateCurrentDish();
        Intent i = new Intent(MainActivity.this, MatchDisplay.class);
//        i.putExtra("matchedList", likedDishes);
        startActivity(i);
    }

    public void onSwipeLeft(){
        dislikedDishes.add(currentDish);
        updateCurrentDish();
        passCurrentDishProfile(foodProfileFragment);
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    public void goBackHome(View view){
        Intent i = new Intent(MainActivity.this, NewUserPage.class);
        startActivity(i);
        System.out.println("---------------------------Disliked dishes: " + dislikedDishes);
    }

    public void goToMatch(View view){
        Intent i = new Intent(MainActivity.this, MatchDisplay.class);
        startActivity(i);
        System.out.println("---------------------------Disliked dishes: " + dislikedDishes);
    }
}